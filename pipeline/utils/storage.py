import json
from datetime import datetime
from typing import Any

from pipeline.utils.content import fetch_desc_trafilatura
from pipeline.utils.logging import logger


def save_search_results(
        query: str,
        results: Any,
        output_file='results.json',
        max_items: int = 5
) -> int:
    items = []
    now = datetime.now().isoformat(timespec='seconds')

    logger.info(f'üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞: query="{query}", '
                f'–º–∞–∫—Å. —ç–ª–µ–º–µ–Ω—Ç–æ–≤={max_items}, —Ñ–∞–π–ª="{output_file}"')

    if isinstance(results, list):
        logger.info(
            f'–ü–æ–ª—É—á–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, '
            f'–±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ {min(len(results), max_items)}'
            )

        for item, element in enumerate(results[:max_items], start=1):
            try:
                data = json.loads(element) if isinstance(
                    element, str) else element
            except Exception as e:
                logger.warning(
                    f'[{item}] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: {element}, '
                    f'–æ—à–∏–±–∫–∞: {e}'
                    )
                continue

            url = (data.get('url') or '').strip()
            title = (data.get('title') or '').strip()
            description = (data.get('description') or '').strip()

            logger.debug(f'[{item}] URL="{url}", title="{title}", '
                         f'description={"–µ—Å—Ç—å" if description else "–ø—É—Å—Ç–æ"}')

            # üî∏ –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç ‚Äî –ø—Ä–æ–±—É–µ–º –≤—ã–∂–∞—Ç—å –µ–≥–æ Trafilatura
            if not description and url:
                logger.info(
                    f'[{item}] –û–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –ø—Ä–æ–±—É–µ–º Trafilatura –¥–ª—è {url}'
                    )
                description = fetch_desc_trafilatura(
                    url,
                    fallback_text=description,
                    max_chars=300
                    )
                if description:
                    snippet = description[:200].replace('\n', ' ')
                    logger.info(
                        f'[{item}] Trafilatura –∏–∑–≤–ª–µ–∫–ª–∞ –æ–ø–∏—Å–∞–Ω–∏–µ '
                        f'({len(description)} —Å–∏–º–≤–æ–ª–æ–≤): "{snippet}..."'
                        )
                else:
                    logger.warning(
                        f'[{item}] Trafilatura –Ω–µ —Å–º–æ–≥–ª–∞ –∏–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ'
                        )

            items.append({
                'query': query,
                'date': now,
                'title': title,
                'description': description,
                'url': url
            })

    # —á–∏—Ç–∞–µ–º —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ
    try:
        with open(output_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            if not isinstance(data, list):
                logger.warning(
                    f'–§–∞–π–ª {output_file} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º'
                    )
                data = []
    except FileNotFoundError:
        logger.info(f'–§–∞–π–ª {output_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π')
        data = []
    except json.JSONDecodeError:
        logger.warning(
            f'–§–∞–π–ª {output_file} –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º'
            )
        data = []

    data.extend(items)

    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    logger.info(f'–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(items)} –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. '
                f'–í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ —Ç–µ–ø–µ—Ä—å {len(data)} –∑–∞–ø–∏—Å–µ–π.')

    return len(items)
