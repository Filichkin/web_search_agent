from typing import Any, Callable, Optional, Dict

from langchain_core.callbacks import BaseCallbackHandler
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain.tools import StructuredTool

from pipeline.utils.logging import logger
from pipeline.utils.storage import save_search_results


class SearchLoggingCallback(BaseCallbackHandler):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, brave-search).
    """
    def on_tool_start(self, serialized, input_str, **kwargs):
        # serialized —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (name/description –∏ –ø—Ä.)
        tool_name = (serialized or {}).get('name', '').lower()

        # input_str –≤ LC 0.2 –±—ã–≤–∞–µ—Ç –∏ dict, –∏ str ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        query_text = None
        if isinstance(input_str, dict):
            # –£ server-brave-search –ø–æ–ª–µ –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'query'
            query_text = input_str.get('query')
            if query_text is None:
                # –∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ "input"
                query_text = input_str.get('input')
        else:
            query_text = str(input_str)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø–æ–∏—Å–∫–æ–º
        if any(option in tool_name for option in ['search', 'brave', 'web']):
            logger.info(
                'üîé [–ü–û–ò–°–ö] –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: %s | –ó–∞–ø—Ä–æ—Å: %r', tool_name, query_text
                )


def wrap_search_tool(
        orig_tool,
        get_raw_user_input: Callable[[], Optional[str]],
        *,
        max_calls_per_message: int = 2   # ‚Üê –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
):
    """
    StructuredTool-–æ–±—ë—Ä—Ç–∫–∞:
    - –ª–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥,
    - –ø–æ–¥–º–µ–Ω—è–µ—Ç kwargs['query'] –Ω–∞ —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    - –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ø–µ—Ç–ª–∏,
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—ã—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ JSON.
    (–ë–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –≤ count/limit/–∏ —Ç.–ø.)
    """

    # —Å–æ—Å—Ç–æ—è–Ω–∏–µ ¬´–Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ¬ª
    called_queries: set[str] = set()
    call_count: int = 0
    last_seen_raw: Optional[str] = None

    # —Å—Ö–µ–º–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
    args_schema = getattr(orig_tool, 'args_schema', None)
    if args_schema is None:
        class _Args(BaseModel):
            query: str = Field(description='Search query string')

            class Config:
                extra = 'allow'
        args_schema = _Args

    async def _acall(**kwargs: Dict[str, Any]) -> Any:
        nonlocal call_count, called_queries, last_seen_raw

        raw = get_raw_user_input()

        # –µ—Å–ª–∏ –ø—Ä–∏—à—ë–ª –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if raw != last_seen_raw:
            called_queries = set()
            call_count = 0
            last_seen_raw = raw

        # –ª–æ–≥ –î–û –ø—Ä–∞–≤–∫–∏
        try:
            logger.info(
                'üîé [–ü–û–ò–°–ö] –î–æ –ø—Ä–∞–≤–∫–∏ | tool=%s | input=%r',
                orig_tool.name,
                kwargs
                )
        except Exception:
            pass

        # –ø–æ–¥–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ query (–æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
        if raw:
            kwargs = {**kwargs, 'query': raw}

        # –∞–Ω—Ç–∏-–ø–µ—Ç–ª—è: –¥–µ–¥—É–ø + –ª–∏–º–∏—Ç
        qnorm = (kwargs.get('query') or '').strip().lower()
        if qnorm in called_queries:
            return (
                '–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ —ç—Ç–æ–º—É –∂–µ –∑–∞–ø—Ä–æ—Å—É; '
                '–∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏/—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞.'
                )
        if call_count >= max_calls_per_message:
            return (
                '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è; '
                '—Å—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ –∏–º–µ—é—â–∏–º—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.'
                )
        called_queries.add(qnorm)
        call_count += 1

        # –ª–æ–≥ –ü–û–°–õ–ï –ø—Ä–∞–≤–∫–∏
        try:
            logger.info(
                'üîé [–ü–û–ò–°–ö] –ü–æ—Å–ª–µ –ø—Ä–∞–≤–∫–∏ | tool=%s | input=%r',
                orig_tool.name,
                kwargs
                )
        except Exception:
            pass

        result = await orig_tool.ainvoke(kwargs)
        logger.info(result)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        try:
            query = kwargs.get('query', '')
            save_search_results(query, result)
            logger.info('–£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ')
        except Exception as e:
            logger.warning('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: %s', e)

        return result

    return StructuredTool.from_function(
        coroutine=_acall,
        name=orig_tool.name,
        description=getattr(orig_tool, 'description', ''),
        args_schema=args_schema,
        return_direct=False,
    )
