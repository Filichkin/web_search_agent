import json
from typing import Any, Callable, Optional, Dict

from langchain_core.callbacks import BaseCallbackHandler
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain.tools import StructuredTool

from pipeline.utils.content import fetch_desc_trafilatura
from pipeline.utils.logging import logger
from pipeline.utils.storage import save_search_results


class SearchLoggingCallback(BaseCallbackHandler):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, brave-search).
    """
    def on_tool_start(self, serialized, input_str, **kwargs):
        # serialized —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (name/description –∏ –ø—Ä.)
        tool_name = (serialized or {}).get('name', '').lower()

        # input_str –≤ LC 0.2 –±—ã–≤–∞–µ—Ç –∏ dict, –∏ str ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        query_text = None
        if isinstance(input_str, dict):
            # –£ server-brave-search –ø–æ–ª–µ –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'query'
            query_text = input_str.get('query')
            if query_text is None:
                # –∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ "input"
                query_text = input_str.get('input')
        else:
            query_text = str(input_str)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø–æ–∏—Å–∫–æ–º
        if any(option in tool_name for option in ['search', 'brave', 'web']):
            logger.info(
                'üîé [–ü–û–ò–°–ö] –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: %s | –ó–∞–ø—Ä–æ—Å: %r', tool_name, query_text
                )


def wrap_search_tool(
        orig_tool,
        get_raw_user_input: Callable[[], Optional[str]],
        *,
        max_calls_per_message: int = 2
):
    """
    –û–±—ë—Ä—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:
    - –ø–æ–¥–º–µ–Ω—è–µ—Ç kwargs['query'] –Ω–∞ —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    - –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ,
    - –æ–±–æ–≥–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Trafilatura –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Markdown-–∫–æ–Ω—Ç–µ–∫—Å—Ç,
    - –ª–æ–≥–∏—Ä—É–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON.
    """

    called_queries: set[str] = set()
    call_count: int = 0
    last_seen_raw: Optional[str] = None

    class _Args(BaseModel):
        query: str = Field(description='Search query string')

        class Config:
            extra = 'allow'

    async def _acall(**kwargs: Dict[str, Any]) -> Any:
        nonlocal call_count, called_queries, last_seen_raw

        raw = get_raw_user_input()

        # —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if raw != last_seen_raw:
            called_queries = set()
            call_count = 0
            last_seen_raw = raw

        # –ª–æ–≥ –¥–æ –ø—Ä–∞–≤–∫–∏
        try:
            logger.info(
                'üîé [–ü–û–ò–°–ö] –î–æ –ø—Ä–∞–≤–∫–∏ | tool=%s | input=%r',
                orig_tool.name,
                kwargs
                )
        except Exception:
            pass

        # –≤—Å–µ–≥–¥–∞ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if raw:
            kwargs = {**kwargs, 'query': raw}

        # –∞–Ω—Ç–∏-–ø–µ—Ç–ª—è
        qnorm = (kwargs.get('query') or '').strip().lower()
        if qnorm in called_queries:
            return (
                '–ü–æ–∏—Å–∫ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ —ç—Ç–æ–º—É –∂–µ –∑–∞–ø—Ä–æ—Å—É; '
                '–∏—Å–ø–æ–ª—å–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–∏–∂–µ.'
                )
        if call_count >= max_calls_per_message:
            return (
                '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è; '
                '—Å—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.'
                )
        called_queries.add(qnorm)
        call_count += 1

        # –ª–æ–≥ –ø–æ—Å–ª–µ –ø—Ä–∞–≤–∫–∏
        try:
            logger.info(
                'üîé [–ü–û–ò–°–ö] –ü–æ—Å–ª–µ –ø—Ä–∞–≤–∫–∏ | tool=%s | input=%r',
                orig_tool.name,
                kwargs
                )
        except Exception:
            pass

        # –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π MCP-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        result = await orig_tool.ainvoke(kwargs)

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º (–∫–∞–∫ –µ—Å—Ç—å, –±–µ–∑ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π)
        try:
            saved = save_search_results(kwargs.get('query', ''), result)
            logger.info('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: %s', saved)
        except Exception as e:
            logger.warning('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: %s', e)

        # --- –û–ë–û–ì–ê–©–ï–ù–ò–ï –î–õ–Ø –ö–û–ù–¢–ï–ö–°–¢–ê –ú–û–î–ï–õ–ò ---
        enriched = []
        if isinstance(result, list):
            for item, element in enumerate(result, start=1):
                if len(enriched) >= 5:
                    break
                try:
                    data = (
                        json.loads(element)
                        if isinstance(element, str) else element
                        )
                except Exception as error:
                    logger.warning(
                        '[%s] –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç: %s',
                        item,
                        error
                        )
                    continue

                url = (data.get('url') or '').strip()
                title = (data.get('title') or '').strip()
                desc = (data.get('description') or '').strip()

                logger.info('[%s] Trafilatura –¥–ª—è %s', item, url or '<no-url>')
                # –≤—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å —Ç–µ–∫—Å—Ç;
                # –µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±–µ—Ä—ë–º –∏—Å—Ö–æ–¥–Ω—ã–π desc
                summary = fetch_desc_trafilatura(
                    url,
                    fallback_text=desc,
                    max_chars=2000
                    )
                # —É–∂–º—ë–º –¥–æ –ø–∞—Ä—ã –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
                # (–≤–∏–∑—É–∞–ª—å–Ω–æ 220‚Äì300 —Å–∏–º–≤–æ–ª–æ–≤)
                snippet = summary.replace('\n', ' ').strip()
                if len(snippet) > 2000:
                    snippet = snippet[:1500] + '...'

                enriched.append({
                    'url': url,
                    'title': title or url,
                    'snippet': snippet
                })
                # logger.info(f'ENRICHED: {enriched}')

        # —Å–æ–±–∏—Ä–∞–µ–º —É–¥–æ–±–æ–≤–∞—Ä–∏–º—ã–π Markdown, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥–∏—Ç –º–æ–¥–µ–ª—å
        if enriched:
            lines = [
                '### –ò—Å—Ç–æ—á–Ω–∏–∫–∏ (–æ–±–æ–≥–∞—â–µ–Ω—ã Trafilatura ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ):'
                ]
            for source in enriched:
                lines.append(f'- [{source["title"]}]({source["url"]})')
                lines.append(f'  {source["snippet"]}')
                lines.append('')
            context_md = '\n'.join(lines)
        else:
            # –µ—Å–ª–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å ‚Äî –≤–µ—Ä–Ω—ë–º –∫–∞–∫ –µ—Å—Ç—å
            context_md = (
                '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–≥–∞—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã; '
                '–∏—Å–ø–æ–ª—å–∑—É–π –∏—Å—Ö–æ–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –ø–æ–∏—Å–∫–∞.'
                )
        # logger.info('üîó [–ü–û–ò–°–ö] –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –º–æ–¥–µ–ª–∏:\n%s', context_md)
        return context_md

    return StructuredTool.from_function(
        coroutine=_acall,
        name=orig_tool.name,
        description=getattr(orig_tool, 'description', ''),
        args_schema=_Args,
        return_direct=False,  # –ø—É—Å—Ç—å –º–æ–¥–µ–ª—å –≤–∏–¥–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–∞–º–∞ –ø–∏—à–µ—Ç –æ—Ç–≤–µ—Ç
    )
