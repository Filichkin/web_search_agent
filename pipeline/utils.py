from typing import Any, Callable, Optional, Dict

from langchain_core.callbacks import BaseCallbackHandler
from langchain_core.pydantic_v1 import BaseModel, Field
from langchain.tools import StructuredTool

from pipeline.logging import logger


class SearchLoggingCallback(BaseCallbackHandler):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, brave-search).
    """
    def on_tool_start(self, serialized, input_str, **kwargs):
        # serialized —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (name/description –∏ –ø—Ä.)
        tool_name = (serialized or {}).get('name', '').lower()

        # input_str –≤ LC 0.2 –±—ã–≤–∞–µ—Ç –∏ dict, –∏ str ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        query_text = None
        if isinstance(input_str, dict):
            # –£ server-brave-search –ø–æ–ª–µ –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'query'
            query_text = input_str.get('query')
            if query_text is None:
                # –∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ "input"
                query_text = input_str.get('input')
        else:
            query_text = str(input_str)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø–æ–∏—Å–∫–æ–º
        if any(option in tool_name for option in ['search', 'brave', 'web']):
            logger.info(
                'üîé [–ü–û–ò–°–ö] –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: %s | –ó–∞–ø—Ä–æ—Å: %r', tool_name, query_text
                )


def wrap_search_tool(
        orig_tool,
        get_raw_user_input: Callable[[], Optional[str]]
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π LangChain StructuredTool, –∫–æ—Ç–æ—Ä—ã–π:
    1) –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –∏–Ω–ø—É—Ç,
    2) –ø–æ–¥–º–µ–Ω—è–µ—Ç kwargs['query'] –Ω–∞ —Å—ã—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    3) –≤—ã–∑—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π MCP-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (async).
    """

    # –í–æ–∑—å–º—ë–º —Å—Ö–µ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å.
    # –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø–æ–¥—Å—Ç–∞–≤–∏–º ¬´—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é¬ª —Å—Ö–µ–º—É
    # —Å –ø–æ–ª–µ–º query –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º extra.
    args_schema = getattr(orig_tool, 'args_schema', None)
    if args_schema is None:
        class _Args(BaseModel):
            query: str = Field(description='Search query string')

            # –ü–æ–∑–≤–æ–ª—è–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            class Config:
                extra = 'allow'
        args_schema = _Args

    async def _acall(**kwargs: Dict[str, Any]) -> Any:
        raw = get_raw_user_input()
        # –ª–æ–≥–∏—Ä—É–µ–º –î–û –ø—Ä–∞–≤–∫–∏
        try:
            logger.info(
                'üîé [–ü–û–ò–°–ö] –î–æ –ø—Ä–∞–≤–∫–∏ | tool=%s | input=%r',
                orig_tool.name,
                kwargs
                )
        except Exception:
            pass

        if raw:
            # –ø–æ–¥–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ query, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            kwargs = {**kwargs, 'query': raw}

        # –ª–æ–≥–∏—Ä—É–µ–º –ü–û–°–õ–ï –ø—Ä–∞–≤–∫–∏
        try:
            logger.info(
                'üîé [–ü–û–ò–°–ö] –ü–æ—Å–ª–µ –ø—Ä–∞–≤–∫–∏ | tool=%s | input=%r',
                orig_tool.name,
                kwargs
                )
        except Exception:
            pass

        # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –¥–µ—Ä–≥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (async)
        return await orig_tool.ainvoke(kwargs)

    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Tool
    wrapped = StructuredTool.from_function(
        coroutine=_acall,
        name=orig_tool.name,
        description=getattr(orig_tool, 'description', ''),
        args_schema=args_schema,
        return_direct=False,
    )
    return wrapped
