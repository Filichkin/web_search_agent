from langchain_core.callbacks import BaseCallbackHandler

from pipeline.logging import logger


class SearchLoggingCallback(BaseCallbackHandler):
    """
    –õ–æ–≥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, brave-search).
    """
    def on_tool_start(self, serialized, input_str, **kwargs):
        # serialized —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (name/description –∏ –ø—Ä.)
        tool_name = (serialized or {}).get('name', '').lower()

        # input_str –≤ LC 0.2 –±—ã–≤–∞–µ—Ç –∏ dict, –∏ str ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∏–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        query_text = None
        if isinstance(input_str, dict):
            # –£ server-brave-search –ø–æ–ª–µ –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'query'
            query_text = input_str.get('query')
            if query_text is None:
                # –∏–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å–ª–∞—Ç—å –ø—Ä–æ—Å—Ç–æ "input"
                query_text = input_str.get('input')
        else:
            query_text = str(input_str)

        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –ø–æ–∏—Å–∫–æ–º
        if any(option in tool_name for option in ['search', 'brave', 'web']):
            logger.info(
                'üîé [–ü–û–ò–°–ö] –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: %s | –ó–∞–ø—Ä–æ—Å: %r', tool_name, query_text
                )
