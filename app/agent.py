# run_gradio_agent.py
import os
import gradio as gr

from dotenv import load_dotenv

from config import settings
from app.main import FileSystemAgent, AgentConfig, ModelProvider
from app.utils.logging import logger


_agent_holder: dict[str, FileSystemAgent | None] = {'agent': None}


async def _startup():
    if _agent_holder['agent'] and _agent_holder['agent'].is_ready:
        return '‚úÖ –ê–≥–µ–Ω—Ç —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'

    load_dotenv()
    cfg = AgentConfig(
        filesystem_path=settings.FILESYSTEM_PATH,
        model_provider=ModelProvider(settings.MODEL_PROVIDER),
        enable_web_search=True
    )
    agent = FileSystemAgent(cfg)
    ok = await agent.initialize()
    if not ok:
        logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞')
        return '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–≥–µ–Ω—Ç–∞'
    _agent_holder['agent'] = agent
    logger.info('‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ (Gradio)')
    return '‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤'


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π) ---
async def chat_handler(message: str, history: list[dict]):
    if not _agent_holder['agent'] or not _agent_holder['agent'].is_ready:
        init_msg = await _startup()
        logger.info(init_msg)

    agent = _agent_holder['agent']
    try:
        reply = await agent.process_message(message, thread_id='gradio')
        return reply
    except Exception as e:
        logger.error(f'‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}')
        return (
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. '
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.'
        )


# --- –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞ ---
async def get_status():
    if not _agent_holder['agent'] or not _agent_holder['agent'].is_ready:
        init_msg = await _startup()
        if '‚ùå' in init_msg:
            return '–ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.'
    agent = _agent_holder['agent']
    st = agent.get_status()
    lines = [
        f'initialized: {st.get("initialized")}',
        f'model_provider: {st.get("model_provider")}',
        f'filesystem_path: {st.get("filesystem_path")}',
        f'memory_enabled: {st.get("memory_enabled")}',
        f'web_search_enabled: {st.get("web_search_enabled")}',
        f'tools_count: {st.get("tools_count")}',
        f'brave_api_key_present: {st.get("brave_api_key_present")}',
    ]
    return '\n'.join(lines)


# --- –°–±–æ—Ä–∫–∞ Gradio UI ---
def build_app() -> gr.Blocks:
    with gr.Blocks(title='Web Search Agent', theme='soft') as demo:
        header = gr.Markdown('# üîç Web Search Agent')
        sub = gr.Markdown(
            '–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∞–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç –≤–µ–±-–ø–æ–∏—Å–∫ (Brave MCP), '
            '–æ–±–æ–≥–∞—Ç–∏—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –≤–µ—Ä–Ω—ë—Ç —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç.'
        )

        chat = gr.Chatbot(height=800, type='messages', show_copy_button=True)
        msg = gr.Textbox(
            label='–í–∞—à –∑–∞–ø—Ä–æ—Å',
            placeholder=(
                '–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–∞–∫–∏–µ –≥–ª–∞–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –ø–æ GEO –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü?'
                ),
            autofocus=True
        )
        send = gr.Button('–û—Ç–ø—Ä–∞–≤–∏—Ç—å', variant='primary')
        clear = gr.Button('–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç')

        with gr.Row():
            status_btn = gr.Button('–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞')
        status_out = gr.Textbox(label='–°—Ç–∞—Ç—É—Å', interactive=False)

        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        init_status = gr.Markdown('‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...')
        demo.load(_startup, inputs=None, outputs=init_status)

        # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        async def _on_send(user_text, history):
            reply = await chat_handler(user_text, history or [])
            new_history = (history or []) + [
                {'role': 'user', 'content': user_text},
                {'role': 'assistant', 'content': reply},
            ]
            return '', new_history

        send.click(_on_send, inputs=[msg, chat], outputs=[msg, chat])
        msg.submit(_on_send, inputs=[msg, chat], outputs=[msg, chat])

        # –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞
        def _clear_chat():
            return []

        clear.click(_clear_chat, inputs=None, outputs=chat)

        # —Å—Ç–∞—Ç—É—Å
        status_btn.click(get_status, inputs=None, outputs=status_out)

    return demo


if __name__ == '__main__':
    port = int(os.getenv('PORT', '7860'))
    app = build_app()
    # –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    app.queue().launch(
        server_name='0.0.0.0',
        server_port=port,
        show_error=True
    )
